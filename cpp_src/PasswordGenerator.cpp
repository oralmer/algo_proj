
#include "PasswordGenerator.h"
#include <iostream>

PasswordGenerator::PasswordGenerator(enum PassType pass_type) :
        m_pass_type(pass_type) {}

std::string PasswordGenerator::operator()(size_t index) {
    switch (m_pass_type) {
        case nums:
            return GenerateCartesian(index, '0', 10);
        case chars:
            return GenerateCartesian(index, 'a', 26);
        default:
            throw std::runtime_error("invalid enum in password generator");
    }
}

size_t PasswordGenerator::IterSize() {
    //the amount of passwords we can generate
    switch (m_pass_type) {
        case nums:
        case chars:
            return UNBOUNDED;
        default:
            throw std::runtime_error("invalid enum in password generator");
    }
}

PassLength PasswordGenerator::CalcLengthCartesian(size_t index, int base) {
    //calculates the length of a password generated by cartesian multiplication given its index
    int length = 1;
    int sum = base;
    int pow = base;
    while (index > sum) {
        length++;
        pow *= base;
        sum += pow;
    }
    struct PassLength pLen{};
    pLen.length = length;
    pLen.sum = sum - pow;
    return pLen;
}

std::string PasswordGenerator::GenerateCartesian(size_t index, char zero_char, int char_num) {
    //generates the password in index i for the cartesian multiplication
    //of chars from zero_char to zero_char + char num, with all lengths
    auto temp = PasswordGenerator::CalcLengthCartesian(index, 26);
    int length = temp.length;
    int sum = temp.sum;
    index -= sum;
    return GenerateCartesian(index, zero_char, char_num, length);
}

std::string PasswordGenerator::GenerateCartesian(size_t index, char zero_char, int char_num, int length) {
    //generates the password in index i for the cartesian multiplication
    //of chars from zero_char to zero_char + char num, with length length
    std::string password;
    for (int i = 0; i < length; i++) {
        password += static_cast<char>(zero_char + index % char_num);
        index /= char_num;
    }
    return password;
}

