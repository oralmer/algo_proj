//
// Created by or on 11/18/2018.
//

#include "PasswordGenerator.h"
#include <iostream>

PasswordGenerator::PasswordGenerator(enum PassType pass_type) :
        pass_type_(pass_type) {}

std::string PasswordGenerator::Numbers(int index) {
    std::string password;
    //sum is the amount of words with a shorter length than the current one. we set index accordingly
    auto temp = PasswordGenerator::CalcLengthCartesian(index, 10);
    int length = std::get<0>(temp);
    int sum = std::get<1>(temp);
    index -= sum;
    for (int i = 0; i < length; i++) {
        password += static_cast<char>('0' + index % 10);
        index /= 10;
    }
    return password;
}

std::string PasswordGenerator::Characters(int index) {
    std::string password;
    //sum is the amount of words with a shorter length than the current one. we set index accordingly
    auto temp = PasswordGenerator::CalcLengthCartesian(index, 26);
    int length = std::get<0>(temp);
    int sum = std::get<1>(temp);
//    std::cout << sum << std::endl;
    index -= sum;
    for (int i = 0; i < length; i++) {
        password += static_cast<char>('a' + index % 26);
        index /= 26;
    }
    return password;
}

std::string PasswordGenerator::operator()(int index) {
    switch (pass_type_) {
        case nums:
            return Numbers(index);
        case chars:
            return Characters(index);
        default:
            throw std::runtime_error("invalid enum in password generator");
    }
}

int PasswordGenerator::Count() {
    switch (pass_type_) {
        case nums:
        case chars:
            return INT8_MAX;
        default:
            throw std::runtime_error("invalid enum in password generator");
    }
}

std::tuple<int, int> PasswordGenerator::CalcLengthCartesian(int index, int base) {
    //calculates the length of a password generated by cartesian multiplication given its index
    int length = 1;
    int sum = base;
    int pow = base;
    while(index > sum){
        length++;
        pow *= base;
        sum += pow;
    }
    return std::make_tuple(length, sum - pow);
}
